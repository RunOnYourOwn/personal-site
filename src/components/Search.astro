---
// Search component with Fuse.js integration
export interface Props {
  placeholder?: string;
  searchData: Array<{
    id: string;
    title: string;
    description: string;
    content?: string;
    tags?: string[];
    type: string;
    slug: string;
    date?: string;
    year?: number;
    extension?: string;
    featured?: boolean;
    status?: string;
  }>;
}

const { placeholder = 'Search posts and projects...', searchData = [] } =
  Astro.props;
---

<div class="search-container">
  <div class="search-input-wrapper">
    <input
      type="text"
      id="search-input"
      class="search-input"
      placeholder={placeholder}
      autocomplete="off"
    />
    <div class="search-icon">
      <svg
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <circle cx="11" cy="11" r="8"></circle>
        <path d="m21 21-4.35-4.35"></path>
      </svg>
    </div>
    <button id="search-clear" class="search-clear" style="display: none;">
      <svg
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
  </div>

  <div id="search-results" class="search-results" style="display: none;">
    <div class="search-results-header">
      <span id="search-count" class="search-count">0 results</span>
      <button id="search-close" class="search-close">Close</button>
    </div>
    <div id="search-results-list" class="search-results-list"></div>
  </div>
</div>

<script is:inline define:vars={{ searchData }}>
  // Check if search data is available
  if (!searchData || searchData.length === 0) {
    console.error('No search data available');
    return;
  }

  // Load Fuse.js from local file
  function loadFuse() {
    return new Promise((resolve, reject) => {
      // Check if already loaded
      if (window.Fuse) {
        resolve(window.Fuse);
        return;
      }

      const script = document.createElement('script');
      script.src = '/fuse.min.js';

      script.onload = function () {
        console.log('Fuse.js loaded successfully from local file');
        if (window.Fuse) {
          resolve(window.Fuse);
        } else {
          reject(new Error('Fuse not available after loading'));
        }
      };

      script.onerror = function () {
        console.error('Failed to load Fuse.js from local file');
        reject(new Error('Failed to load Fuse.js from local file'));
      };

      document.head.appendChild(script);
    });
  }

  // Initialize search with Fuse.js
  loadFuse()
    .then(Fuse => {
      // Fuse.js configuration
      const fuseOptions = {
        keys: [
          { name: 'title', weight: 0.7 },
          { name: 'description', weight: 0.3 },
          { name: 'content', weight: 0.2 },
          { name: 'tags', weight: 0.1 },
        ],
        threshold: 0.3,
        includeScore: true,
        includeMatches: true,
      };

      try {
        // Initialize Fuse
        const fuse = new Fuse(searchData, fuseOptions);
        initializeSearch(fuse);
      } catch (error) {
        console.error('Error initializing Fuse:', error);
      }
    })
    .catch(error => {
      console.error('Failed to load Fuse.js:', error);
      // Show error message to user
      const searchInput = document.getElementById('search-input');
      if (searchInput) {
        searchInput.placeholder =
          'Search unavailable - please refresh the page';
        searchInput.disabled = true;
      }
    });

  function initializeSearch(fuse) {
    // DOM elements
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');
    const searchResultsList = document.getElementById('search-results-list');
    const searchCount = document.getElementById('search-count');
    const searchClear = document.getElementById('search-clear');
    const searchClose = document.getElementById('search-close');

    // Search function
    function performSearch(query) {
      if (!query.trim()) {
        hideResults();
        return;
      }

      const results = fuse.search(query);
      displayResults(results);
    }

    // Display search results
    function displayResults(results) {
      if (results.length === 0) {
        searchResultsList.innerHTML = `
        <div class="search-no-results">
          <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
            <circle cx="11" cy="11" r="8"/>
            <path d="m21 21-4.35-4.35"/>
          </svg>
          <p>No results found for "${searchInput.value}"</p>
        </div>
      `;
      } else {
        searchResultsList.innerHTML = results
          .map(result => {
            const item = result.item;
            const score = result.score;
            const matches = result.matches;

            // Highlight matches in title
            let highlightedTitle = item.title;
            if (matches && matches[0]) {
              highlightedTitle = highlightMatches(
                item.title,
                matches[0].indices
              );
            }

            // Generate correct URL based on type
            const url =
              item.type === 'blog'
                ? `/blog/${item.slug}.${item.extension}/`
                : `/projects/${item.slug}/`;

            return `
          <div class="search-result-item" data-score="${score}">
            <a href="${url}" class="search-result-link">
              <div class="search-result-content">
                <div class="search-result-header">
                  <h3 class="search-result-title">${highlightedTitle}</h3>
                  <span class="search-result-type">${item.type}</span>
                </div>
                <p class="search-result-description">${item.description}</p>
                ${
                  item.tags && item.tags.length > 0
                    ? `
                  <div class="search-result-tags">
                    ${item.tags.map(tag => `<span class="search-tag">${tag}</span>`).join('')}
                  </div>
                `
                    : ''
                }
                <div class="search-result-footer">
                  ${item.date ? `<time class="search-result-date">${new Date(item.date).toLocaleDateString()}</time>` : ''}
                  ${item.year ? `<time class="search-result-year">${item.year}</time>` : ''}
                  <span class="search-result-arrow">â†’</span>
                </div>
              </div>
            </a>
          </div>
        `;
          })
          .join('');
      }

      searchCount.textContent = `${results.length} result${results.length !== 1 ? 's' : ''}`;
      searchResults.style.display = 'block';
    }

    // Highlight search matches
    function highlightMatches(text, indices) {
      if (!indices || indices.length === 0) return text;

      let highlighted = '';
      let lastIndex = 0;

      indices.forEach(([start, end]) => {
        highlighted += text.slice(lastIndex, start);
        highlighted += `<mark>${text.slice(start, end + 1)}</mark>`;
        lastIndex = end + 1;
      });

      highlighted += text.slice(lastIndex);
      return highlighted;
    }

    // Hide search results
    function hideResults() {
      searchResults.style.display = 'none';
      searchClear.style.display = 'none';
    }

    // Clear search
    function clearSearch() {
      searchInput.value = '';
      hideResults();
      searchInput.focus();
    }

    // Event listeners
    searchInput.addEventListener('input', e => {
      const query = e.target.value;
      if (query.trim()) {
        searchClear.style.display = 'block';
        performSearch(query);
      } else {
        hideResults();
      }
    });

    searchInput.addEventListener('keydown', e => {
      if (e.key === 'Escape') {
        hideResults();
        searchInput.blur();
      }
    });

    searchClear.addEventListener('click', clearSearch);
    searchClose.addEventListener('click', hideResults);

    // Close results when clicking outside
    document.addEventListener('click', e => {
      if (!e.target.closest('.search-container')) {
        hideResults();
      }
    });

    // Focus search input with Ctrl+K or Cmd+K
    document.addEventListener('keydown', e => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        searchInput.focus();
      }
    });
  }
</script>

<style>
  .search-container {
    position: relative;
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
  }

  .search-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }

  .search-input {
    width: 100%;
    padding: 1rem 3.5rem 1rem 3rem;
    border: 2px solid var(--border-color);
    border-radius: 0.75rem;
    background: var(--bg-primary);
    color: var(--text-primary);
    font-size: 1rem;
    font-weight: 500;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .search-input:focus {
    outline: none;
    border-color: var(--accent);
    box-shadow:
      0 0 0 4px rgba(var(--accent-rgb), 0.1),
      0 4px 12px rgba(0, 0, 0, 0.15);
    transform: translateY(-1px);
  }

  .search-input::placeholder {
    color: var(--text-secondary);
    font-weight: 400;
  }

  .search-icon {
    position: absolute;
    left: 1rem;
    color: var(--text-secondary);
    pointer-events: none;
    transition: color 0.2s ease;
  }

  .search-input:focus + .search-icon {
    color: var(--accent);
  }

  .search-clear {
    position: absolute;
    right: 1rem;
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0.375rem;
    border-radius: 0.375rem;
    transition: all 0.2s ease;
  }

  .search-clear:hover {
    color: var(--text-primary);
    background: var(--bg-secondary);
  }

  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: var(--bg-primary);
    border: 1px solid var(--border);
    border-top: none;
    border-radius: 0 0 0.75rem 0.75rem;
    box-shadow:
      0 10px 25px rgba(0, 0, 0, 0.15),
      0 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    max-height: 400px;
    overflow-y: auto;
    backdrop-filter: blur(8px);
    animation: slideDown 0.2s ease-out;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .search-results-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid var(--border-color);
    background: var(--bg-secondary);
    backdrop-filter: blur(8px);
  }

  .search-count {
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-weight: 600;
    font-variant-numeric: tabular-nums;
  }

  .search-close {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    transition: all 0.2s ease;
  }

  .search-close:hover {
    color: var(--text-primary);
    background: var(--bg-primary);
  }

  .search-results-list {
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    background: var(--bg-primary);
  }

  .search-result-item {
    background: var(--bg-primary);
    border: 1px solid var(--border);
    border-radius: 0.75rem;
    overflow: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow:
      0 1px 3px rgba(0, 0, 0, 0.1),
      0 1px 2px rgba(0, 0, 0, 0.06);
    position: relative;
  }

  .search-result-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, var(--accent), var(--accent-light));
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .search-result-item:hover {
    transform: translateY(-3px);
    box-shadow:
      0 10px 25px rgba(0, 0, 0, 0.15),
      0 4px 6px rgba(0, 0, 0, 0.1);
    border-color: var(--accent);
  }

  .search-result-item:hover::before {
    opacity: 1;
  }

  .search-result-link {
    display: block;
    padding: 1.5rem;
    text-decoration: none;
    color: inherit;
    transition: all 0.2s ease;
    height: 100%;
  }

  .search-result-content {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    height: 100%;
  }

  .search-result-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.75rem;
  }

  .search-result-title {
    font-size: 1.25rem;
    font-weight: 700;
    margin: 0;
    color: var(--text-primary);
    line-height: 1.3;
    flex: 1;
    letter-spacing: -0.025em;
  }

  .search-result-type {
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    color: var(--accent-dark);
    background: var(--accent-light);
    padding: 0.375rem 0.75rem;
    border-radius: 0.375rem;
    margin-left: 1rem;
    white-space: nowrap;
    letter-spacing: 0.05em;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  .search-result-description {
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin: 0 0 1.25rem 0;
    line-height: 1.6;
    font-weight: 400;
  }

  .search-result-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
  }

  .search-tag {
    font-size: 0.75rem;
    font-weight: 500;
    color: var(--accent-dark);
    background: var(--accent-light);
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    transition: all 0.2s ease;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  .search-tag:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .search-result-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: auto;
    padding-top: 0.75rem;
    border-top: 1px solid var(--border);
  }

  .search-result-date,
  .search-result-year {
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-weight: 500;
    font-variant-numeric: tabular-nums;
  }

  .search-result-arrow {
    color: var(--accent);
    font-weight: 600;
    font-size: 1rem;
    transition: transform 0.2s ease;
  }

  .search-result-item:hover .search-result-arrow {
    transform: translateX(2px);
  }

  .search-no-results {
    text-align: center;
    padding: 3rem 1.5rem;
    color: var(--text-secondary);
  }

  .search-no-results svg {
    margin-bottom: 1.5rem;
    opacity: 0.4;
    color: var(--text-secondary);
  }

  .search-no-results p {
    margin: 0;
    font-size: 0.875rem;
    font-weight: 500;
    line-height: 1.5;
  }

  /* Highlight matches */
  mark {
    background: linear-gradient(
      120deg,
      rgba(var(--accent-rgb), 0.3) 0%,
      rgba(var(--accent-rgb), 0.1) 100%
    );
    color: var(--accent-dark);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-weight: 600;
    box-shadow: 0 1px 2px rgba(var(--accent-rgb), 0.2);
    border: 1px solid rgba(var(--accent-rgb), 0.2);
  }

  /* Dark mode styles */
  :global(.dark) .search-result-item {
    background: rgb(31, 41, 55);
    border-color: rgb(55, 65, 81);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
  }

  :global(.dark) .search-result-item:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
    border-color: var(--accent);
  }

  :global(.dark) .search-result-title {
    color: white;
  }

  :global(.dark) .search-result-description {
    color: rgb(209, 213, 219);
  }

  :global(.dark) .search-result-type {
    background: rgba(var(--accent-rgb), 0.2);
    color: var(--accent);
  }

  :global(.dark) .search-tag {
    background: rgba(var(--accent-rgb), 0.2);
    color: var(--accent);
  }

  :global(.dark) .search-result-date,
  :global(.dark) .search-result-year {
    color: rgb(156, 163, 175);
  }

  :global(.dark) .search-result-arrow {
    color: var(--accent);
  }

  :global(.dark) .search-input {
    background: rgb(31, 41, 55);
    border-color: rgb(55, 65, 81);
    color: white;
  }

  :global(.dark) .search-input:focus {
    border-color: var(--accent);
  }

  :global(.dark) .search-results {
    background: rgb(31, 41, 55);
    border-color: rgb(55, 65, 81);
  }

  :global(.dark) .search-results-header {
    background: rgb(17, 24, 39);
    border-bottom-color: rgb(55, 65, 81);
  }

  :global(.dark) .search-result-link:hover {
    background: rgb(17, 24, 39);
  }

  :global(.dark) .search-tag {
    background: rgb(55, 65, 81);
    color: rgb(156, 163, 175);
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .search-container {
      max-width: 100%;
    }

    .search-results {
      max-height: 300px;
    }

    .search-result-link {
      padding: 0.75rem;
    }

    .search-result-title {
      font-size: 1rem;
    }
  }
</style>
