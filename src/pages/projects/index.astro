---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import Header from '../../components/Header.astro';
import Search from '../../components/Search.astro';
import ProjectCard from '../../components/ProjectCard.astro';
import { generateSearchData } from '../../scripts/generate-search-data.js';
import { SITE_DESCRIPTION, SITE_TITLE } from '../../consts';

const projects = await getCollection('projects');
const featuredProjects = projects.filter(project => project.data.featured);
const otherProjects = projects.filter(project => !project.data.featured);

// Sort by year (newest first)
const sortByYear = (
  a: CollectionEntry<'projects'>,
  b: CollectionEntry<'projects'>
) => (b.data.year || 0) - (a.data.year || 0);
featuredProjects.sort(sortByYear);
otherProjects.sort(sortByYear);

// Combine all projects for the main list (just like blog page)
const allProjects = [...featuredProjects, ...otherProjects];

// Generate search data
const searchData = await generateSearchData();

// Get all unique tags for filtering
const allTags = [
  ...new Set(projects.flatMap(project => project.data.tags || [])),
];
---

<!doctype html>
<html lang="en" class="dark">
  <head>
    <BaseHead
      title={`Projects - ${SITE_TITLE}`}
      description={SITE_DESCRIPTION}
    />
  </head>
  <body>
    <Header />
    <main class="projects-main">
      <!-- Hero Section -->
      <section class="projects-hero" aria-labelledby="projects-title">
        <div class="projects-hero-content">
          <h1 id="projects-title" class="projects-title">Projects</h1>
          <p class="projects-subtitle">
            A showcase of my development work and personal projects
          </p>
        </div>
      </section>

      <!-- Search & Filters Section -->
      <section
        class="search-filters-section"
        aria-label="Search and filter projects"
      >
        <div class="search-container">
          <Search
            placeholder="Search blog posts and projects..."
            searchData={searchData.all}
          />
        </div>

        <div class="filters-container">
          <div class="filter-group">
            <button class="filter-btn active" data-filter="all"
              >All Projects</button
            >
            {
              allTags.map(tag => (
                <button class="filter-btn" data-filter={tag.toLowerCase()}>
                  {tag}
                </button>
              ))
            }
          </div>
        </div>
      </section>

      <!-- Projects Section -->
      <section class="projects-section">
        <div class="projects-layout" id="projects-layout">
          <!-- Featured Project -->
          {
            allProjects.length > 0 && (
              <div
                class="featured-project scroll-animate"
                data-tags={
                  allProjects[0].data.tags
                    ?.map(tag => tag.toLowerCase())
                    .join(' ') || ''
                }
                style="animation-delay: 0s"
              >
                <ProjectCard project={allProjects[0]} featured={true} />
              </div>
            )
          }

          <!-- Grid Projects -->
          <div class="projects-grid" id="projects-grid">
            {
              allProjects.slice(1).map((project, index) => (
                <div
                  class="project-grid-item scroll-animate"
                  data-tags={
                    project.data.tags
                      ?.map(tag => tag.toLowerCase())
                      .join(' ') || ''
                  }
                  style={`animation-delay: ${(index + 1) * 0.1}s`}
                >
                  <ProjectCard project={project} featured={false} />
                </div>
              ))
            }
          </div>
        </div>

        <div class="no-results" id="no-results" style="display: none;">
          <div class="no-results-content">
            <h3>No projects found</h3>
            <p>Try adjusting your search or filter criteria.</p>
          </div>
        </div>
      </section>
    </main>
    <Footer />
  </body>
</html>

<style>
  .projects-main {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .projects-hero {
    text-align: center;
    margin-bottom: 3rem;
    padding: 2rem 0;
    margin-top: 60px; /* Account for fixed header */
  }

  .projects-title {
    font-size: clamp(2.5rem, 6vw, 4rem);
    font-weight: 800;
    margin: 0 0 1.5rem 0;
    background: linear-gradient(
      135deg,
      var(--accent),
      var(--orange),
      var(--purple)
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    background-size: 200% 200%;
    animation: gradientShift 3s ease-in-out infinite;
    letter-spacing: -0.04em;
    line-height: 1.1;
  }

  .projects-subtitle {
    font-size: clamp(1.125rem, 2.5vw, 1.375rem);
    color: var(--text-secondary);
    margin: 0;
    line-height: 1.6;
    font-weight: 400;
    letter-spacing: -0.01em;
  }

  @keyframes gradientShift {
    0%,
    100% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
  }

  .search-filters-section {
    margin-bottom: 3rem;
  }

  .search-container {
    margin-bottom: 2rem;
  }

  .filters-container {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 0.75rem;
  }

  .filter-group {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: center;
  }

  .filter-btn {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border);
    border-radius: 2rem;
    background: var(--bg-primary);
    color: var(--text-secondary);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }

  .filter-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(var(--accent-rgb), 0.2),
      transparent
    );
    transition: left 0.5s ease;
  }

  .filter-btn:hover {
    border-color: var(--accent);
    color: var(--accent);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(var(--accent-rgb), 0.2);
  }

  .filter-btn:hover::before {
    left: 100%;
  }

  .filter-btn.active {
    background: var(--accent);
    color: white;
    border-color: var(--accent);
    box-shadow: 0 4px 12px rgba(var(--accent-rgb), 0.3);
  }

  .projects-section {
    position: relative;
  }

  .projects-layout {
    display: flex;
    flex-direction: column;
    gap: 3rem;
  }

  .featured-project {
    margin-bottom: 1rem;
  }

  .featured-project :global(.project-card) {
    max-width: none;
    width: 100%;
  }

  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
    width: 100%;
  }

  .project-grid-item {
    display: block;
    width: 100%;
  }

  .no-results {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--text-secondary);
  }

  .no-results-content h3 {
    font-size: 1.5rem;
    margin: 0 0 1rem 0;
    color: var(--text-primary);
  }

  .no-results-content p {
    margin: 0;
    font-size: 1rem;
  }

  /* Dark mode styles */
  :global(.dark) .projects-title {
    color: white;
  }

  :global(.dark) .projects-subtitle {
    color: rgb(209, 213, 219);
  }

  :global(.dark) .filter-btn {
    background: rgb(31, 41, 55);
    border-color: rgb(55, 65, 81);
    color: rgb(156, 163, 175);
  }

  :global(.dark) .no-results-content h3 {
    color: white;
  }

  :global(.dark) .no-results-content p {
    color: rgb(156, 163, 175);
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .projects-main {
      padding: 0.75rem;
      max-width: 100vw;
      overflow-x: hidden;
    }

    .projects-hero {
      text-align: center;
      margin-bottom: 2rem;
      padding: 1rem 0;
      max-width: 100%;
      overflow-x: hidden;
    }

    .projects-title {
      font-size: 2.75rem;
      line-height: 1.1;
      margin-bottom: 0.75rem;
    }

    .projects-subtitle {
      font-size: 1.125rem;
      line-height: 1.4;
      max-width: 100%;
      padding: 0 0.5rem;
    }

    .projects-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .search-filters-section {
      margin-bottom: 2rem;
      padding: 0 0.5rem;
      max-width: 100%;
      overflow-x: hidden;
    }

    .search-container {
      margin-bottom: 1.5rem;
      max-width: 100%;
    }

    .search-input {
      font-size: 1rem;
      padding: 0.875rem 1rem 0.875rem 3rem;
      width: 100%;
      max-width: 100%;
      box-sizing: border-box;
    }

    .search-icon {
      left: 1rem;
    }

    .filters-container {
      gap: 0.5rem;
      justify-content: flex-start;
      flex-wrap: wrap;
      max-width: 100%;
      overflow-x: hidden;
    }

    .filter-group {
      justify-content: flex-start;
      flex-wrap: wrap;
      padding-bottom: 0.5rem;
      gap: 0.5rem;
      max-width: 100%;
      overflow-x: hidden;
    }

    .filter-btn {
      white-space: nowrap;
      flex-shrink: 1;
      font-size: 0.8rem;
      padding: 0.5rem 0.75rem;
      min-width: auto;
      max-width: calc(50% - 0.25rem);
    }
  }

  @media (max-width: 480px) {
    .projects-main {
      padding: 0.5rem;
      max-width: 100vw;
      overflow-x: hidden;
    }

    .projects-hero {
      margin-bottom: 1.5rem;
      padding: 0.75rem 0;
      max-width: 100%;
      overflow-x: hidden;
    }

    .projects-title {
      font-size: 2.25rem;
      line-height: 1.1;
    }

    .projects-subtitle {
      font-size: 1rem;
      line-height: 1.3;
    }

    .search-filters-section {
      margin-bottom: 1.5rem;
      padding: 0 0.25rem;
    }

    .search-input {
      font-size: 1rem;
      padding: 0.875rem 1rem 0.875rem 3rem;
    }

    .search-icon {
      left: 1rem;
      width: 1.25rem;
      height: 1.25rem;
    }

    .filter-btn {
      font-size: 0.875rem;
      padding: 0.5rem 0.75rem;
    }
  }
</style>

<script>
  // Filter functionality
  document.addEventListener('DOMContentLoaded', function () {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const featuredProject = document.querySelector(
      '.featured-project'
    ) as HTMLElement | null;
    const projectItems = document.querySelectorAll(
      '.project-grid-item'
    ) as NodeListOf<HTMLElement>;
    const noResults = document.getElementById(
      'no-results'
    ) as HTMLElement | null;
    const projectsLayout = document.getElementById(
      'projects-layout'
    ) as HTMLElement | null;

    filterBtns.forEach(btn => {
      btn.addEventListener('click', function (this: HTMLElement) {
        // Update active state
        filterBtns.forEach(b => b.classList.remove('active'));
        this.classList.add('active');

        const filter = this.dataset.filter;

        // Filter featured project
        let featuredVisible = false;
        if (featuredProject && filter) {
          const featuredTags = featuredProject.dataset.tags || '';
          const shouldShowFeatured =
            filter === 'all' || featuredTags.includes(filter);

          if (shouldShowFeatured) {
            featuredProject.style.display = 'block';
            featuredProject.style.animation =
              'slideInUp 0.6s ease-out forwards';
            featuredVisible = true;
          } else {
            featuredProject.style.display = 'none';
          }
        }

        // Filter grid items
        let visibleCount = 0;
        if (filter) {
          projectItems.forEach(item => {
            const tags = item.dataset.tags || '';
            const shouldShow = filter === 'all' || tags.includes(filter);

            if (shouldShow) {
              item.style.display = '';
              item.style.animation = 'slideInUp 0.6s ease-out forwards';
              visibleCount++;
            } else {
              item.style.display = 'none';
            }
          });
        }

        // Show/hide no results
        const totalVisible = (featuredVisible ? 1 : 0) + visibleCount;
        if (totalVisible === 0) {
          if (noResults) noResults.style.display = 'block';
          if (projectsLayout) projectsLayout.style.display = 'none';
        } else {
          if (noResults) noResults.style.display = 'none';
          if (projectsLayout) projectsLayout.style.display = 'flex';
        }
      });
    });
  });

  // Initialize scroll animations for this page
  function initPageScrollAnimations() {
    console.log('Projects page: Initializing scroll animations');

    // First, ensure all elements start hidden
    const elements = document.querySelectorAll('.scroll-animate');
    console.log(
      'Projects page: Found scroll-animate elements:',
      elements.length
    );

    elements.forEach(element => {
      // Remove any existing animate-in class and ensure element is hidden
      element.classList.remove('animate-in');
      console.log('Projects page: Reset element:', element);
    });

    if (!('IntersectionObserver' in window)) {
      console.log(
        'No IntersectionObserver, showing elements immediately:',
        elements.length
      );
      elements.forEach(element => {
        element.classList.add('animate-in');
      });
      return;
    }

    // Wait a moment before starting observations to ensure elements are properly hidden
    setTimeout(() => {
      const observer = new IntersectionObserver(
        entries => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              console.log('Projects page: Element animating in:', entry.target);
              entry.target.classList.add('animate-in');
              observer.unobserve(entry.target);
            }
          });
        },
        {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px',
        }
      );

      elements.forEach(element => {
        console.log('Projects page: Observing element:', element);
        observer.observe(element);
      });
    }, 100);
  }

  // Fix mobile scrolling issues
  function fixMobilePageScrolling() {
    // Ensure the page can scroll on mobile
    document.body.style.overflowY = 'auto';
    document.documentElement.style.overflowY = 'auto';

    // Force a reflow to ensure proper height calculation
    document.body.offsetHeight;

    // Ensure main content area is scrollable
    const main = document.querySelector('main');
    if (main) {
      main.style.minHeight = '100vh';
      main.style.overflowY = 'visible';
    }
  }

  // Initialize when page loads
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function () {
      fixMobilePageScrolling();
      initPageScrollAnimations();
    });
  } else {
    fixMobilePageScrolling();
    initPageScrollAnimations();
  }
</script>
