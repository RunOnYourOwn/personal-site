---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Header from '../components/Header.astro';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;

// Reading time will be calculated in JavaScript from the rendered content
const readingTime = 5; // Default fallback
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <style>
      main {
        width: calc(100% - 2em);
        max-width: 100%;
        margin: 0;
        margin-top: 60px; /* Account for fixed header */
      }
      .hero-image {
        width: 100%;
      }
      .hero-image img {
        display: block;
        margin: 0 auto;
        border-radius: 12px;
        box-shadow: var(--box-shadow);
      }
      .prose {
        width: 100%;
        max-width: 900px;
        margin: auto;
        padding: 1em;
        color: rgb(var(--gray-dark));
      }

      /* Wider content for large screens */
      @media (min-width: 1400px) {
        .prose {
          max-width: 1000px;
        }
      }

      /* Dark mode styles */
      :global(.dark) .prose {
        color: rgb(209, 213, 219);
      }

      :global(.dark) .prose strong,
      :global(.dark) .prose b {
        color: rgb(255, 255, 255);
        font-weight: 600;
      }

      :global(.dark) .prose h1,
      :global(.dark) .prose h2,
      :global(.dark) .prose h3,
      :global(.dark) .prose h4,
      :global(.dark) .prose h5,
      :global(.dark) .prose h6 {
        color: rgb(255, 255, 255);
      }
      .title {
        margin-bottom: 1em;
        padding: 1em 0;
        text-align: center;
        line-height: 1;
      }
      .title-header {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 0.5em;
      }
      .title h1 {
        margin: 0;
      }
      .copy-link-btn {
        background: none;
        border: 1px solid var(--border);
        border-radius: 0.5rem;
        padding: 0.5rem;
        cursor: pointer;
        color: var(--text-secondary);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .copy-link-btn:hover {
        background: var(--accent);
        color: white;
        border-color: var(--accent);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(var(--accent-rgb), 0.3);
      }
      .copy-link-btn:active {
        transform: translateY(0);
      }
      .date {
        margin-bottom: 0.5em;
        color: rgb(var(--gray));
      }
      .reading-time {
        color: var(--accent);
        font-weight: 500;
        font-size: 0.9em;
        margin: 0.25em 0;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.25rem;
      }
      .reading-time::before {
        content: '⏱️';
        font-size: 0.8em;
      }
      .last-updated-on {
        font-style: italic;
      }

      /* Comments section styling */
      .comments-section {
        margin-top: 3rem;
        padding-top: 2rem;
        border-top: 1px solid var(--border);
      }

      .comments-section h3 {
        margin-bottom: 1.5rem;
        color: var(--text-primary);
        font-size: 1.5rem;
        font-weight: 600;
      }
    </style>
  </head>

  <body>
    <Header />
    <main>
      <article>
        <div class="hero-image">
          {
            heroImage && (
              <Image width={1020} height={510} src={heroImage} alt="" />
            )
          }
        </div>
        <div class="prose">
          <div class="title">
            <div class="date">
              <FormattedDate date={pubDate} />
              <div class="reading-time">
                {readingTime} min read
              </div>
              {
                updatedDate && (
                  <div class="last-updated-on">
                    Last updated on <FormattedDate date={updatedDate} />
                  </div>
                )
              }
            </div>
            <div class="title-header">
              <h1>{title}</h1>
              <button class="copy-link-btn" title="Copy link to this post">
                <svg
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <path
                    d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"
                  ></path>
                  <path
                    d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"
                  ></path>
                </svg>
              </button>
            </div>
            <hr />
          </div>
          <slot />
        </div>

        <!-- Remark42 Comments Section -->
        <div class="comments-section">
          <div id="remark42"></div>
        </div>
      </article>
    </main>
    <Footer />

    <script>
      // Copy link functionality and reading time calculation
      document.addEventListener('DOMContentLoaded', function () {
        // Calculate reading time from the actual content
        const article = document.querySelector('article');
        if (article) {
          const text = article.innerText || article.textContent || '';
          const words = text
            .split(/\s+/)
            .filter(word => word.length > 0).length;
          const readingTime = Math.ceil(words / 200); // 200 words per minute

          // Update reading time display
          const readingTimeElement = document.querySelector('.reading-time');
          if (readingTimeElement) {
            readingTimeElement.textContent = `${readingTime} min read`;
          }
        }

        const copyBtn = document.querySelector(
          '.copy-link-btn'
        ) as HTMLButtonElement;
        if (copyBtn) {
          copyBtn.addEventListener('click', async function () {
            try {
              await navigator.clipboard.writeText(window.location.href);

              // Show success feedback
              const originalHTML = copyBtn.innerHTML;
              copyBtn.innerHTML = `
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="20,6 9,17 4,12"/>
                </svg>
              `;
              copyBtn.style.background = 'var(--green)';
              copyBtn.style.borderColor = 'var(--green)';

              // Reset after 2 seconds
              setTimeout(() => {
                copyBtn.innerHTML = originalHTML;
                copyBtn.style.background = '';
                copyBtn.style.borderColor = '';
              }, 2000);
            } catch (err) {
              // Fallback for older browsers
              const textArea = document.createElement('textarea');
              textArea.value = window.location.href;
              document.body.appendChild(textArea);
              textArea.select();
              // @ts-ignore - execCommand is deprecated but still needed for fallback
              document.execCommand('copy');
              document.body.removeChild(textArea);

              // Show success feedback
              const originalHTML = copyBtn.innerHTML;
              copyBtn.innerHTML = `
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="20,6 9,17 4,12"/>
                </svg>
              `;
              copyBtn.style.background = 'var(--green)';
              copyBtn.style.borderColor = 'var(--green)';

              setTimeout(() => {
                copyBtn.innerHTML = originalHTML;
                copyBtn.style.background = '';
                copyBtn.style.borderColor = '';
              }, 2000);
            }
          });
        }
      });
    </script>

    <!-- Remark42 Comments -->
    <script>
      // TypeScript declarations for Remark42
      declare global {
        interface Window {
          remark_config: {
            host: string;
            site_id: string;
            url: string;
            theme: string;
            locale: string;
            show_email_subscription: boolean;
            simple_view: boolean;
            max_shown_comments: number;
            no_footer: boolean;
            components: string[];
          };
          REMARK42?: {
            changeTheme: (theme: string) => void;
          };
        }
      }

      // Function to detect current theme (only returns 'light' or 'dark')
      function getCurrentTheme() {
        const hasDarkClass =
          document.documentElement.classList.contains('dark');

        // If site has explicit dark class, use dark
        if (hasDarkClass) {
          return 'dark';
        }
        // If no dark class is present, use light theme (respect user's explicit choice)
        return 'light';
      }

      window.remark_config = {
        host: import.meta.env.PUBLIC_REMARK42_HOST || 'http://localhost:8081',
        site_id: import.meta.env.PUBLIC_REMARK42_SITE_ID || 'remark',
        url: window.location.href,
        theme: getCurrentTheme(),
        locale: 'en',
        show_email_subscription: false,
        simple_view: false,
        max_shown_comments: 10,
        no_footer: false,
        components: ['embed'],
      };

      // Official Remark42 initialization script
      // @ts-ignore
      !(function (e, n) {
        for (var o = 0; o < e.length; o++) {
          var r = n.createElement('script'),
            c = '.js',
            d = n.head || n.body;
          ('noModule' in r
            ? ((r.type = 'module'), (c = '.mjs'))
            : (r.async = !0),
            (r.defer = !0),
            (r.src = window.remark_config.host + '/web/' + e[o] + c),
            d.appendChild(r));
        }
      })(window.remark_config.components || ['embed'], document);

      // Listen for theme changes and update Remark42 theme
      function updateRemark42Theme() {
        if (window.REMARK42 && window.REMARK42.changeTheme) {
          const newTheme = getCurrentTheme();
          window.REMARK42.changeTheme(newTheme);
        } else {
          // If REMARK42 isn't ready yet, try again after a short delay
          setTimeout(updateRemark42Theme, 100);
        }
      }

      // Listen for theme changes
      document.addEventListener('DOMContentLoaded', function () {
        // Watch for class changes on html element
        const observer = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
            if (
              mutation.type === 'attributes' &&
              mutation.attributeName === 'class'
            ) {
              updateRemark42Theme();
            }
          });
        });

        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ['class'],
        });

        // Also listen for system theme changes
        window
          .matchMedia('(prefers-color-scheme: dark)')
          .addEventListener('change', updateRemark42Theme);

        // Listen for Remark42 ready event
        window.addEventListener('REMARK42::ready', function () {
          // Force theme update when Remark42 is ready
          setTimeout(updateRemark42Theme, 200);
        });

        // Also try to update theme after a delay to catch any missed events
        setTimeout(updateRemark42Theme, 1000);
      });
    </script>
  </body>
</html>
