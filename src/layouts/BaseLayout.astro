---
// BaseLayout component for consistent page structure
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

interface Props {
  title: string;
  description: string;
  image?: ImageMetadata;
}

const { title, description, image } = Astro.props;
---

<!doctype html>
<html lang="en" class="dark no-js">
  <head>
    <BaseHead title={title} description={description} image={image} />
  </head>
  <body>
    <script>
      // Remove no-js class if JavaScript is enabled
      document.documentElement.classList.remove('no-js');

      // Fix mobile scrolling issues
      function fixMobileScrolling() {
        // Force reflow to ensure proper height calculation
        document.body.style.height = 'auto';
        document.documentElement.style.height = 'auto';

        // Set proper viewport height for mobile
        const vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', `${vh}px`);

        // Ensure body can scroll
        document.body.style.overflowY = 'auto';
        document.documentElement.style.overflowY = 'auto';
      }

      // Handle skip links
      document.addEventListener('DOMContentLoaded', function () {
        // Fix mobile scrolling on page load
        fixMobileScrolling();

        // Fix mobile scrolling on resize
        window.addEventListener('resize', fixMobileScrolling);
        window.addEventListener('orientationchange', function () {
          setTimeout(fixMobileScrolling, 100);
        });
        const skipLinks = document.querySelectorAll('.skip-link');
        skipLinks.forEach(link => {
          link.addEventListener('click', e => {
            const targetId = (link as HTMLAnchorElement)
              .getAttribute('href')
              ?.substring(1);
            if (targetId) {
              const targetElement = document.getElementById(targetId);
              if (targetElement) {
                e.preventDefault();
                targetElement.focus();
                targetElement.scrollIntoView({ behavior: 'smooth' });
              }
            }
          });
        });
      });
    </script>

    <!-- Skip links for keyboard navigation -->
    <a href="#main-content" class="skip-link">Skip to main content</a>
    <a href="#site-navigation" class="skip-link">Skip to navigation</a>

    <Header />
    <main id="main-content" role="main">
      <slot />
    </main>
    <Footer />

    <!-- Enhanced Button Interactions Script -->
    <script>
      // Enhanced button interactions
      function initButtonEnhancements() {
        const buttons = document.querySelectorAll(
          'button, .btn, a[role="button"]'
        );
        buttons.forEach(button => {
          if (!button.classList.contains('btn-enhanced')) {
            button.classList.add('btn-enhanced');

            button.addEventListener('click', e => {
              const event = e as MouseEvent;
              const ripple = document.createElement('span');
              const rect = button.getBoundingClientRect();
              const size = Math.max(rect.width, rect.height);
              const x = event.clientX - rect.left - size / 2;
              const y = event.clientY - rect.top - size / 2;

              ripple.style.width = ripple.style.height = size + 'px';
              ripple.style.left = x + 'px';
              ripple.style.top = y + 'px';
              ripple.classList.add('ripple');

              if (!document.querySelector('#ripple-styles')) {
                const style = document.createElement('style');
                style.id = 'ripple-styles';
                style.textContent = `
                  .ripple {
                    position: absolute;
                    border-radius: 50%;
                    background: rgba(255, 255, 255, 0.3);
                    transform: scale(0);
                    animation: ripple-animation 0.6s linear;
                    pointer-events: none;
                  }
                  
                  @keyframes ripple-animation {
                    to {
                      transform: scale(4);
                      opacity: 0;
                    }
                  }
                `;
                document.head.appendChild(style);
              }

              button.appendChild(ripple);
              setTimeout(() => ripple.remove(), 600);
            });
          }
        });
      }

      // Initialize button enhancements
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initButtonEnhancements);
      } else {
        initButtonEnhancements();
      }
    </script>
  </body>
</html>

<style>
  html {
    font-family: 'Inter', system-ui, sans-serif;
    line-height: 1.6;
    color: var(--text-primary);
    background: var(--bg-primary);
  }

  body {
    margin: 0;
    padding: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    transition:
      background 0.3s ease,
      color 0.3s ease;
  }

  main {
    flex: 1;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    width: 100%;
    box-sizing: border-box;
  }

  /* Dark mode styles */
  :global(.dark) html {
    color: white;
    background: rgb(17, 24, 39);
  }

  /* Responsive design */
  @media (max-width: 768px) {
    main {
      padding: 0 1rem;
    }
  }
</style>
