name: CD Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.sha }}
          restore-keys: |
            buildx-

      - name: Build image (local)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          load: true
          tags: personal-site:ci
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Save image
        run: docker save personal-site:ci -o personal-site-image.tar

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: personal-site-image
          path: personal-site-image.tar

  test-container:
    name: Test Container
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download image
        uses: actions/download-artifact@v4
        with:
          name: personal-site-image

      - name: Load image
        run: docker load -i personal-site-image.tar

      - name: Test Container
        run: |
          # Start the container
          docker run -d --name test-personal-site -p 8080:80 personal-site:ci

          # Wait for container to start
          sleep 10

          # Check if container is running
          docker ps | grep test-personal-site

          # Test health endpoint
          echo "Testing health endpoint..."
          curl -f http://localhost:8080/healthz || echo "Health endpoint test failed"

          # Test main page
          echo "Testing main page..."
          curl -f http://localhost:8080/ || echo "Main page test failed"

          # Test blog page
          echo "Testing blog page..."
          curl -f http://localhost:8080/blog/ || echo "Blog page test failed"

          # Test projects page
          echo "Testing projects page..."
          curl -f http://localhost:8080/projects/ || echo "Projects page test failed"

          # Clean up
          docker stop test-personal-site
          docker rm test-personal-site

      - name: Security Scan
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.0
          echo "Scanning image for vulnerabilities..."
          trivy image --severity HIGH,CRITICAL personal-site:ci || echo "Vulnerabilities found in image"

  publish:
    name: Publish to GHCR
    needs: test-container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from tag
        id: version
        run: |
          # Extract version from git tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/runonyourown/personal-site:latest
            ghcr.io/runonyourown/personal-site:${{ github.sha }}
            ghcr.io/runonyourown/personal-site:v${{ steps.version.outputs.version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            # First release - get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since previous tag
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges ${PREVIOUS_TAG}..HEAD)
          fi

          # Create release body
          cat > release_body.md << EOF
          ## Personal Site v${{ steps.version.outputs.version }}

          ### Docker Images
          - \`ghcr.io/runonyourown/personal-site:v${{ steps.version.outputs.version }}\`
          - \`ghcr.io/runonyourown/personal-site:latest\`

          ### Changes
          $COMMITS

          ### Deployment
          This release is automatically deployed to production via Portainer webhook.
          EOF

          # Output the release body
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          cat release_body.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Personal Site v${{ steps.version.outputs.version }}
          body: ${{ steps.release_notes.outputs.release_body }}
          draft: false
          prerelease: false

      - name: Trigger Portainer Webhook
        if: env.PORTAINER_WEBHOOK_URL != ''
        run: |
          curl -X POST "${{ secrets.PORTAINER_WEBHOOK_URL }}" || echo "Portainer webhook failed"
        env:
          PORTAINER_WEBHOOK_URL: ${{ secrets.PORTAINER_WEBHOOK_URL }}
